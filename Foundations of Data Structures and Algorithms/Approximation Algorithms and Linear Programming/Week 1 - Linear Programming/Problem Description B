We would like to write a python code to find our optimal transport problem. Suppose we have piles of different sizes of raw material at various locations in a worksite.

The piles of raw material are given in a comma separated format as :

ID, Coordinates, Weight
i, (xi, yi), wi

where: 0<=i<=n-1.

We need to plan to redistribute this pile to a new configuration that is also given in terms of the desired coordinates and weights in a comma separated format as:

ID, Coordinates, Weight
i, (x'j, y'j), w'j

where: 0<=j<=m-1


To evolve a linear programming formulation, first let's identify the decision variables.

Let  xi,j denote the amount of material transported from source location  i to target location  j. Since  0<=i<=n−1 and  0<=j<=m−1, there are  m*n such decision variables.

Clearly,  xi,j≥0 since it does not make any sense to transport negative amount of material.

Let  Di,j denote the distance from source location  i to destination location  j.

Di,j=sqrt((xi−x'j)^2+(yi−y'j)^2)
 
A. Write down the objective function in terms of  xi,j and  Di,j for  0<=i<=n and  1<=j<=m. Also indicate if we are going to maximize or minimize it.


Next for each source location i, the total amount of material transported from i to various destination locations must sum up to 𝑤i: the total weight of material at location i

B. Write down a constraint to enforce this.


Next for each destination location j, the total amount of material transported to j from various source locations must sum up to 𝑤'j: the total weight of material at destination location j. 

C. Write down a constraint to enforce this.


Formulate your optimization problem and return the optimal solution for given problem data:

1. source_coords: List of (x,y) pairs of coordinates for the source locations.
2. The size of the list is the number of source locations n.
3. source_weights: List of 𝑤i weights for the source location.
4. The size of the list equals number of source locations n and i𝑡ℎ element of this list is the weight corresponding to the i𝑡ℎ coordinate in the list source_coords.

Similarly we have two lists dest_coords and dest_weights. Note that sum(source_weights) must equal sum(dest_weights).

The solution should return a list of lists sol wherein sol[i][j] indicates the amount of material transported from source location i to destination location j.

For instance, suppose our solution was as follows (here  n=3,m=4):
x0,0=0, x0,1=5, x0,2=7, x0,3=0
x1,0=1, x1,1=4, x1,2=4, x1,3=4
x2,0=4, x2,1=5, x2,2=5, x2,3=5

which is equivalent to:

[ [0, 5, 7, 0], 
  [1, 4, 4, 4], 
  [4, 5, 5, 5] 
 ]


Write a python code using Pulp library to solve the problem by completing calculate_optimal_transport_plan the followiing code:

from math import sqrt
def calculate_distance(a, b):
    (xa, ya) = a
    (xb, yb) = b
    return sqrt( (xa- xb)**2 + (ya - yb)**2)
    
def get_objective(var_values, source_coords, dest_coords):
    # A useful function for our test cases: please do not modify
    # It should help you in your code however to see how we calculate the objective function
    obj = sum([ var_values[i][j] * calculate_distance(source_coords[i], dest_coords[j])  for i in range(n) for j in range(m)  ])
    return obj 

def calculate_optimal_transport_plan(source_coords, source_weights, dest_coords, dest_weights):
    n = len(source_coords)
    assert (n== len(source_weights))
    m = len(dest_coords)
    assert (m == len(dest_weights))
    assert( sum(source_weights) == sum(dest_weights)) #

