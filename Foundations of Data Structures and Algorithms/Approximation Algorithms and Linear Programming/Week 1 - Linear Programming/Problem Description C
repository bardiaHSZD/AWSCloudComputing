We would like to write a python code to find our optimal transport problem. Suppose we have piles of different sizes of raw material at various locations in a worksite.

The piles of raw material are given in a comma separated format as :

ID, Coordinates, Weight
i, (xi, yi), wi

where: 0<=i<=n-1.

We need to plan to redistribute this pile to a new configuration that is also given in terms of the desired coordinates and weights in a comma separated format as:

ID, Coordinates, Weight
i, (x'j, y'j), w'j

where: 0<=j<=m-1

Let us consider we have the starting and desired configurations:

Source locations given as coordinates and weights:  (xi,yi),wi,  i=1,…,n.
Target locations given as coordinates and weights:  (x'j,y'j),w'j,  j=1,…,m.

The cost of transporting a unit weight from source location  i to target location  j is given by the Euclidean distance:
Di,j = sqrt((xi−x'j)^2+(yi−y'j)^2)
 
Instead of deriving the transportation plan, we will focus on setting purchase/sale prices at the source and target locations respectively.

Suppose, we are allowed to set prices at the source and target locations for the material such that at each source location  i we set a price  pi per unit of the material and at each target location  j, we set a price  p'j per unit of the material. However, we cannot set the prices arbitrarily. We have to follow the following constraint:

For each source location  i and target location  j the price difference  p'j−pi must be less than or equal to  Di,j, which means p'j−pi≤Di,j.

Once the prices have been setup at the source and target locations, the revenue we earn by transporting goods is given by: Sum(p'j*w'j) for j=1 to m − Sum(pi*wi) for i=1 to n.
 
The first term is what we get by selling at the target location and the second term is what we get from buying at the source locations.

Formulate a LP that will set prices so that we maximize the revenue while satisfying the "economic" constraint above.

Problem data is same as before:

1. source_coords: List of (x,y) pairs of coordinates for the source locations.
2. The size of the list is the number of source locations n.
3. source_weights: List of wi weights for the source location.
4. The size of the list equals number of source locations n and i𝑡ℎ element of this list is the weight corresponding to the i𝑡ℎ coordinate in the list source_coords.

Similarly we have two lists dest_coords and dest_weights. Note that sum(source_weights) must equal sum(dest_weights).

Your function should return the solution as pair of two lists: (source_prices, target_prices). source_prices should have length n and target_prices should have length m.


Write a python code using Pulp library to solve the problem by completing compute_optimal_prices the followiing code:


from pulp import *
from math import sqrt
def calculate_distance(a, b):
    (xa, ya) = a
    (xb, yb) = b
    return sqrt( (xa- xb)**2 + (ya - yb)**2)

def compute_optimal_prices(source_coords, source_weights, dest_coords, dest_weights):
    n = len(source_coords)
    assert (n== len(source_weights))
    m = len(dest_coords)
    assert (m == len(dest_weights))
    assert( sum(source_weights) == sum(dest_weights)) 
    # TODO: 1. make the decision variables.
    #       2. the objective function 
    #       3. the constraints 
    #
    
    lpModel = LpProblem('Transportation', LpMaximize)


    lpModel.solve()
    source_prices = [v.varValue for v in source_vars]
    dest_prices = [v.varValue for v in dest_vars]
    return (source_prices, dest_prices)










