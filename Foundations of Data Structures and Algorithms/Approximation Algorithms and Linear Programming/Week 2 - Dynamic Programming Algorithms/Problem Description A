We would like to solve  the three coloring problem as a integer linear programming problem.

The three coloring problem inputs an undirected graph G with vertices  V={1,…,n} and undirected edges  E. We are looking to color each vertex one of three colors red, green or blue such that for any edge  (i,j) the nodes  i,j have different colors.

Given a graph, we wish to know if a three coloring is possible and if so, we wish to find the three coloring. 

Here are the tasks:

Task 1: Setup the three coloring problem as an integer linear program.

Here is the definition of decision variables:
For each vertex  i in V, we will use three decision variables  xRi, xGi and xBi that indicate whether the vertex if colored red, green or blue, respectively. Note that these are all binary variables taking on  0,1 values.

And here is the definition of constraints:
(A) Each vertex can take just one color
Write down a constraint that says that each vertex must be colored exactly one of three colors: red, green or blue in terms of  xRi, xGi and xi.

(B) Adjacent vertices cannot be the same color.
Write down constraints for each edge  (i,j) in 𝐸 that they cannot be the same color. Hint Write down three constraints that express that the vertices  i,j cannot both be green, cannot both be red and cannot both be blue respectively. Translate these requirements into constraints involving  xGi, xGj , xRi, xRj and xBi, xBj.

Task 2: 
Write down the python code using Pulp library. A function called encodeAndSolveThreeColoring(n, edge_list) that given the number of vertices  n>=1 and the list of edges as a list of pairs of vertices [ (i1, j1), (i2, j2) ..., (im, jm) ] returns a tuple (flag, color_assignment) consisting of boolean flag and a list color_assignment, wherein flag is True if the graph is three colorable and False if not.

color_assignment is a list of n colors r, g, or b (standing for red, green or blue) where the  𝑖𝑡ℎ
element of the list stands for the color assigned to vertex i. Note that the color_assignment component of the return value is ignored if flag is set to False.

Complete the following code:

from pulp import *

def encode_and_solve_three_coloring(n, edge_list):
    assert n >= 1, 'Graph must have at least one vertex'
    assert all( 0 <= i and i < n and 0 <= j and j < n and i != j for (i,j) in edge_list ), 'Edge list is not well formed'
    prob = LpProblem('Three Color', LpMinimize)
    #TODO 1. Formulate the decision variables
    #TODO 2. Add the constraints for each vertex and edge in the graph.
    #TODO 3. Solve and interpret the status of the solution.
    #TODO 4. Return the result in the required form to pass the tests below.
    